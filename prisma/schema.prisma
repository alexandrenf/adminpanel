// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    blogs         Blog[]
    registros     Registros[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Blog {
    id              Int      @id @default(autoincrement())
    date            DateTime
    author          String   // Legacy author field for backward compatibility
    title           String
    summary         String
    link            String
    imageLink       String?
    forceHomePage   Boolean
    userId          String
    rascunho        Boolean?

    user            User     @relation(fields: [userId], references: [id])
    authors         BlogAuthor[] // New relationship for extended author info
    images          NoticiaImage[] // Relationship to noticia images

    @@index([title])
}

// Noticia Image Management
model NoticiaImage {
    id              Int      @id @default(autoincrement())
    originalName    String   // Original filename from user upload
    randomString    String   @unique // Random string used as actual filename
    url             String   // Full CDN URL to the image
    filePath        String   // GitHub file path
    blogId          Int?     // Can be null for images uploaded to "new" noticias
    fileSize        Int?     // File size in bytes
    mimeType        String?  // MIME type of the image
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    blog            Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
    
    @@index([randomString])
    @@index([blogId])
    @@index([createdAt])
}

// Extended Author Information
model Author {
    id              Int      @id @default(autoincrement())
    name            String
    bio             String?
    photoLink       String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    blogAuthors     BlogAuthor[]
    
    @@index([name])
}

// Many-to-many relationship between Blog and Author
model BlogAuthor {
    id              Int      @id @default(autoincrement())
    blogId          Int
    authorId        Int
    
    blog            Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
    author          Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    
    @@unique([blogId, authorId])
    @@index([blogId])
    @@index([authorId])
}

model EB {
    id          Int      @id @default(autoincrement())
    role        String
    acronym     String?
    name        String
    email       String
    order       Int
    imageLink   String?
    timeID      Int?
    time        TimeRegional? @relation(fields: [timeID], references: [id], onDelete: Cascade)
}

model CR {
    id          Int      @id @default(autoincrement())
    role        String
    acronym     String
    name        String
    email       String
    order       Int
    imageLink   String?
    regionalID  Int
    regional    Regional   @relation(fields: [regionalID], references: [id], onDelete: Cascade)
}

model Regional {
    id          Int      @id @default(autoincrement())
    name        String
    acronym     String
    crs         CR[]
}

model TimeRegional {
    id          Int      @id @default(autoincrement())
    name        String
    type        String
    ebs         EB[]
    membros     MembroTime[]
}

model MembroTime {
    id          Int      @id @default(autoincrement())
    name        String
    role        String
    imageLink   String?
    timeID      Int
    time        TimeRegional   @relation(fields: [timeID], references: [id], onDelete: Cascade)
}

model Arquivo {
    id          Int      @id @default(autoincrement())
    type        String
    title       String
    date        DateTime
    author      String
    imageLink   String?
    fileLink    String?
}

model Gestao {
    id          Int      @id @default(autoincrement())
    yearStart   Int
    yearEnd     Int
    arquivados  Arquivado[]
}

model Arquivado {
    id          Int      @id @default(autoincrement())
    role        String
    type        String
    acronym     String
    name        String
    order       Int
    imageLink   String?
    gestaoId    Int
    gestao      Gestao   @relation(fields: [gestaoId], references: [id], onDelete: Cascade)
}

model Config {
    id              Int      @id @default(autoincrement())
    // Legacy alert configuration
    toggleDate      Boolean?
    dateStart       DateTime?
    dateEnd         DateTime?
    toggleMessage   Boolean?
    message         String?
    toggleButton    Boolean?
    buttonText      String?
    buttonUrl       String?
    title           String?
    
    // Event configuration
    eventType       String?         // "alert" or "ag" 
    eventActive     Boolean?        // Whether event is currently active
    eventNumber     Int?            // Event number (e.g., 63 for 63Âª AG)
    eventTitle      String?         // Full event title
    eventDescription String?   @db.Text     // Event description/promotional text
    eventLogo       String?         // Path to event logo
    
    // Event dates and location
    eventDateStart  DateTime?       // Event start date
    eventDateEnd    DateTime?       // Event end date
    eventCity       String?         // Event city
    eventState      String?         // Event state
    eventVenue      String?         // Event venue name
    eventAddress    String?         // Full venue address
    
    // Event downloads and links
    survivalKitUrl  String?         // URL to survival kit PDF
    registrationUrl String?         // URL to registration PDF
    survivalKitStatus String?       // "available", "coming_soon", "disabled"
    registrationStatus String?      // "available", "coming_soon", "disabled"
    
    // Event content
    eventContent    String?    @db.LongText // Markdown content for detailed info
    eventContentUrl String?         // GitHub URL for content if using external storage
    
    // Event sponsors (JSON array)
    eventSponsors   String?    @db.Text     // JSON array of sponsor objects
    
    // Event branding
    primaryColor    String?         // Primary brand color
    secondaryColor  String?         // Secondary brand color
    
    // SEO and metadata
    metaTitle       String?         // Page title for SEO
    metaDescription String?         // Meta description
    metaKeywords    String?         // SEO keywords
    
    // Configuration flags
    showSponsors    Boolean?        // Show/hide sponsors section
    showDownloads   Boolean?        // Show/hide download buttons
    eventStatus     String?         // "upcoming", "ongoing", "past"
    registrationOpen Boolean?       // Whether registration is open
    
    // Tracking
    lastUpdated     DateTime?  @updatedAt
    updatedBy       String?         // User ID who last updated
}

model Registros {
    id          Int      @id @default(autoincrement())
    url         String   @db.Text
    updatedAt   DateTime @updatedAt
    updatedBy   User     @relation(fields: [updatedById], references: [id])
    updatedById String

    @@index([updatedById])
}