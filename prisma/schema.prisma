// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    blogs         Blog[]
    registros     Registros[]
    archivedAssemblies ArchivedAssembly[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Blog {
    id              Int      @id @default(autoincrement())
    date            DateTime
    author          String
    title           String
    summary         String
    link            String
    imageLink       String?
    forceHomePage   Boolean
    userId          String

    user            User     @relation(fields: [userId], references: [id])

    @@index([title])
}

model EB {
    id          Int      @id @default(autoincrement())
    role        String
    acronym     String?
    name        String
    email       String
    order       Int
    imageLink   String?
    timeID      Int?
    time        TimeRegional? @relation(fields: [timeID], references: [id], onDelete: Cascade)
}

model CR {
    id          Int      @id @default(autoincrement())
    role        String
    acronym     String
    name        String
    email       String
    order       Int
    imageLink   String?
    regionalID  Int
    regional    Regional   @relation(fields: [regionalID], references: [id], onDelete: Cascade)
}

model Regional {
    id          Int      @id @default(autoincrement())
    name        String
    acronym     String
    crs         CR[]
}

model TimeRegional {
    id          Int      @id @default(autoincrement())
    name        String
    type        String
    ebs         EB[]
    membros     MembroTime[]
}

model MembroTime {
    id          Int      @id @default(autoincrement())
    name        String
    role        String
    imageLink   String?
    timeID      Int
    time        TimeRegional   @relation(fields: [timeID], references: [id], onDelete: Cascade)
}

model Arquivo {
    id          Int      @id @default(autoincrement())
    type        String
    title       String
    date        DateTime
    author      String
    imageLink   String?
    fileLink    String?
}

model Gestao {
    id          Int      @id @default(autoincrement())
    yearStart   Int
    yearEnd     Int
    arquivados  Arquivado[]
}

model Arquivado {
    id          Int      @id @default(autoincrement())
    role        String
    type        String
    acronym     String
    name        String
    order       Int
    imageLink   String?
    gestaoId    Int
    gestao      Gestao   @relation(fields: [gestaoId], references: [id], onDelete: Cascade)
}

model Config {
    id              Int      @id @default(autoincrement())
    toggleDate      Boolean?
    dateStart       DateTime?
    dateEnd         DateTime?
    toggleMessage   Boolean?
    message         String?
    toggleButton    Boolean?
    buttonText      String?
    buttonUrl       String?
    title           String?
}

model Registros {
    id          Int      @id @default(autoincrement())
    url         String   @db.Text
    updatedAt   DateTime @updatedAt
    updatedBy   User     @relation(fields: [updatedById], references: [id])
    updatedById String

    @@index([updatedById])
}

// Archived AG data structures - when AGs are archived, data moves from Convex to Prisma
model ArchivedAssembly {
    id              String   @id // Original Convex ID
    name            String
    type            String   // "AG" | "AGE"
    location        String
    startDate       DateTime
    endDate         DateTime
    originalStatus  String   // Original status from Convex
    createdAt       DateTime
    createdBy       String
    lastUpdated     DateTime
    lastUpdatedBy   String
    
    // Registration settings
    registrationOpen     Boolean
    registrationDeadline DateTime?
    maxParticipants      Int?
    description          String?
    paymentRequired      Boolean?
    
    // Archive metadata
    archivedAt           DateTime @default(now())
    archivedBy           String
    archivedByUser       User     @relation(fields: [archivedBy], references: [id])
    
    // Relations to archived data
    participants         ArchivedAGParticipant[]
    registrations        ArchivedAGRegistration[]
    modalities          ArchivedRegistrationModality[]
    configSnapshot      ArchivedAGConfig?
    
    @@index([name])
    @@index([archivedAt])
    @@index([type])
}

model ArchivedAGParticipant {
    id              String           @id // Original Convex ID
    assemblyId      String
    assembly        ArchivedAssembly @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
    
    type            String
    participantId   String
    name            String
    role            String?
    status          String?
    escola          String?
    regional        String?
    cidade          String?
    uf              String?
    agFiliacao      String?
    
    addedAt         DateTime
    addedBy         String
    
    @@index([assemblyId])
    @@index([participantId])
    @@index([type])
}

model ArchivedRegistrationModality {
    id                  String           @id // Original Convex ID
    assemblyId          String
    assembly            ArchivedAssembly @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
    
    name                String
    description         String?
    price               Int              // Price in cents
    maxParticipants     Int?
    isActive            Boolean
    displayOrder        Int
    createdAt           DateTime
    createdBy           String
    
    registrations       ArchivedAGRegistration[]
    
    @@index([assemblyId])
}

model ArchivedAGRegistration {
    id                         String                        @id // Original Convex ID
    assemblyId                 String
    assembly                   ArchivedAssembly              @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
    modalityId                 String?
    modality                   ArchivedRegistrationModality? @relation(fields: [modalityId], references: [id])
    
    participantType            String
    participantId              String
    participantName            String
    participantRole            String?
    participantStatus          String?
    registeredAt               DateTime
    registeredBy               String
    status                     String // "pending" | "approved" | "rejected" | "cancelled"
    
    // Contact and basic info
    escola                     String?
    regional                   String?
    cidade                     String?
    uf                         String?
    agFiliacao                 String?
    email                      String?
    phone                      String?
    specialNeeds               String?
    
    // Detailed personal information
    emailSolar                 String?
    dataNascimento             String?
    cpf                        String?
    nomeCracha                 String?
    celular                    String?
    comiteLocal                String?
    comiteAspirante            String?
    autorizacaoCompartilhamento Boolean?
    
    // Additional information
    experienciaAnterior        String?
    motivacao                  String?
    expectativas               String?
    dietaRestricoes            String?
    alergias                   String?
    medicamentos               String?
    necessidadesEspeciais      String?
    restricaoQuarto            String?
    pronomes                   String?
    contatoEmergenciaNome      String?
    contatoEmergenciaTelefone  String?
    outrasObservacoes          String?
    participacaoComites        String? // JSON string of array
    interesseVoluntariado      Boolean?
    
    // Payment information
    isPaymentExempt            Boolean?
    paymentExemptReason        String?
    
    // Receipt information (file data, not storage reference)
    receiptFileName            String?
    receiptFileType            String?
    receiptFileSize            Int?
    receiptFileData            String? @db.LongText // Base64 encoded file data
    receiptUploadedAt          DateTime?
    receiptUploadedBy          String?
    
    // Review information
    reviewedAt                 DateTime?
    reviewedBy                 String?
    reviewNotes                String?
    rejectionReason            String?
    resubmittedAt              DateTime?
    resubmissionNote           String?
    
    @@index([assemblyId])
    @@index([participantId])
    @@index([status])
}

model ArchivedAGConfig {
    id                      String           @id @default(cuid())
    assemblyId              String           @unique
    assembly                ArchivedAssembly @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
    
    // Config snapshot at time of archiving
    codeOfConductUrl        String?
    paymentInfo             String?
    paymentInstructions     String?
    bankDetails             String?
    pixKey                  String?
    registrationEnabled     Boolean
    autoApproval            Boolean
    
    // Original timestamps
    originalCreatedAt       DateTime
    originalUpdatedAt       DateTime
    originalUpdatedBy       String
    
    // Archive metadata
    archivedAt              DateTime @default(now())
}